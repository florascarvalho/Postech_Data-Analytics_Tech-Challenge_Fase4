import streamlit as st

abas = st.tabs(["üß© Metodologia", "üìà Previs√£o do Pre√ßo do Petr√≥leo", "üñ•Ô∏è C√≥digo Utilizado"])

with abas[0]:  # Primeira aba
    st.header("üõ†Ô∏è Metodologia Adotada para a Solu√ß√£o do Problema")
    import streamlit as st

    st.markdown(
        """
        <div style="background-color:#D3D3D3; padding:15px; border-radius:10px;">
            <h2 style="color:#333333; text-align:center;">Metodologia</h2>
        </div>
        """,
        unsafe_allow_html=True
    )

    # Divisor de p√°gina
    st.markdown(
        """
        <hr style="border: 3px solid #007BFF;">
        """,
        unsafe_allow_html=True
    )

    st.title("üìå ARIMA/SARIMAX")

    st.markdown("""
    Os modelos ARIMA (AutoRegressive Integrated Moving Average) e SARIMAX (Seasonal AutoRegressive Integrated Moving Average with eXogenous variables) s√£o usados para an√°lise e 
    previs√£o de s√©ries temporais. 
                        
    """)
    st.write("### Modelo ARIMA")

    st.write("""
    O Modelo ARIMA (p, d, q) √© um modelo estat√≠stico para s√©ries temporais. Deve ser aplicado sempre antes da aplica√ß√£o do SARIMAX, pois visa o tratamento dos dados,
    garantindo maior confiabilidade nas predi√ß√µes.
    O primeiro passo realizado √© verificar se a s√©rie √© estacion√°ria ou n√£o. Para esse modelo de predi√ß√£o, ela dever√° ser estacion√°ria, e caso n√£o seja, deer√£o ser removidas
    as tend√™ncias da amostragem.""")

    st.write("")         
    st.write("Para realizar o teste de estacionariedade, √© aplicado o teste de Dickey-Fuller (Teste ADF), onde:")
    st.write("")  
    st.write("‚Ä¢ Hip√≥tese nula (H‚ÇÄ): A s√©rie tem raiz unit√°ria (n√£o √© estacion√°ria).")
    st.write("")                   
    st.write("‚Ä¢ Hip√≥tese alternativa (H‚ÇÅ): A s√©rie √© estacion√°ria.")
    st.write("")  
    st.write("‚Ä¢ Se o p-valor < 0.05, rejeitamos H‚ÇÄ e consideramos a s√©rie estacion√°ria.")        
    st.write("")  
    st.write("Al√©m desse teste, no modelo ARIMA √© definido os par√¢metros p, d, q, que s√£o:") 
    st.write("p ‚Üí N√∫mero de defasagens na parte autorregressiva (Usamos PACF para escolher).")
    st.write("")  
    st.write("d ‚Üí N√∫mero de diferencia√ß√µes para tornar a s√©rie estacion√°ria (Usamos Dickey-Fuller).")
    st.write("")  
    st.write("q ‚Üí N√∫mero de defasagens nos erros passados (Usamos ACF para escolher).")

    st.write("### Modelo SARIMAX")
    st.write("""
    O Modelo SARIMAX √© uma extens√£o do SARIMA. √â aplic√°vel para dados temporais em que na predi√ß√£o se espera a varia√ß√£o sazonal e/ou tend√™ncias.
    Logo √© um modelo adequado para nosso projeto, no qual se deseja obter o pre√ßo futuro do Barril de Petr√≥leo, que pode ter grandes oscila√ß√µes entre os per√≠odos impactados por eventos externos.   

    Os par√¢metro utilizados para o c√°lculo foram os que tiveram o melhor retorno na modelagem do ARIMA.       
    """)

    st.write("### M√©tricas de Performance")
    st.write("""
    Para os modelos de ARIMA/ SARIMAX, uma boa pr√°tica √© calcular as m√©tricas de performance, para avaliar a confiabilidade do modelo.
    Foram adotas as seguintes:        
    """)         

    st.write("‚Ä¢ MAE (Erro M√©dio Absoluto)")
    st.write("""
    Mede o erro m√©dio entre os valores reais e os previstos. Quanto menor o valor de MAE, mais precisas s√£o as previs√µes.
    """)
    st.write("") 
    st.write("‚Ä¢ MSE (Erro Quadr√°tico M√©dio)")
    st.write("""
    Calcula a m√©dia quadr√°tica dos erros. Quanto maior seu valor, menos confi√°vel ser√£o as predi√ß√µes.
    """)
    st.write("") 
    st.write("‚Ä¢ RMSE (Raiz do Erro Quadr√°tico M√©dio)")
    st.write("""
    √â similar ao MSE, mas ajusta a escala do erro para se tornar mais pr√≥xima dos dados originais.
    Quanto maior seu valor, menos confi√°vel ser√£o as predi√ß√µes.
    """)  
    st.write("")       
    st.write("‚Ä¢ MAPE (Erro Percentual M√©dio Absoluto)")
    st.write("""
    Mede o erro em rela√ß√£o ao valor real, expressando-o em porcentagem.
    √ötil para comparar modelos, pois mostra qu√£o distante, em m√©dia, a previs√£o est√° do realizado.
    """)
    st.write("") 
    st.write("‚Ä¢ WMAPE (Erro Percentual M√©dio Ponderado)")
    st.write("""
    Funciona de forma semelhante ao MAPE, por√©m considera a import√¢ncia valor real ao calcular o erro.
    Aplic√°vel quando h√° muita varia√ß√£o nos dados, pois evita distor√ß√µes causadas por outliers.
    """)

with abas[1]:  # Primeira aba

    import streamlit as st
    import pandas as pd
    import plotly.express as px
    from datetime import datetime

    st.markdown(
        """
        <div style="background-color:#D3D3D3; padding:15px; border-radius:10px;">
            <h2 style="color:#333333; text-align:center;">Previs√£o do Pre√ßo do Barril de Petr√≥leo</h2>
            <h3 style="color:#333333; text-align:center;">Utilizando o modelo preditivo ARIMA/SARIMAX</h3>
        </div>
        """,
        unsafe_allow_html=True
    )

    # Divisor de p√°gina
    st.markdown(
        """
        <hr style="border: 3px solid #007BFF;">
        """,
        unsafe_allow_html=True
    )


    # URL do CSV
    CSV_URL = "https://raw.githubusercontent.com/florascarvalho/Postech_Data-Analytics_Tech-Challenge_Fase4/main/bases_dados/previsoes.csv"

    # Carregar os dados
    @st.cache_data
    def load_data():
        df = pd.read_csv(CSV_URL)
        df["data"] = pd.to_datetime(df["data"], format="%Y-%m-%d")  # Converter para datetime com formato ano-m√™s-dia
        return df

    df = load_data()

    # Definir limite de data m√°xima
    max_date = datetime(2025, 4, 4)

    # Criar input de data no Streamlit
    data_escolhida = st.date_input("Escolha uma data entre 04/02/2025 e 04/04/2025", max_value=max_date)

    data_escolhida = pd.to_datetime(data_escolhida)  # Converter input para datetime compat√≠vel

    # Filtrar os dados at√© a data escolhida
    df_filtrado = df[df["data"] <= data_escolhida]

    if not df_filtrado.empty:
        # Criar gr√°fico
        fig = px.line(df_filtrado, x="data", y="preco", title="Evolu√ß√£o do Pre√ßo")
        fig.update_traces(mode="lines+markers")
        fig.update_layout(xaxis_title="Data", yaxis_title="Pre√ßo")
        
        # Exibir gr√°fico
        st.plotly_chart(fig)

        # Mostrar o pre√ßo exato na data escolhida
        valor_na_data = df[df["data"] == data_escolhida]
        if not valor_na_data.empty:
            preco = valor_na_data.iloc[0]["preco"]
            st.write(f"### A previs√£o do pre√ßo em {data_escolhida.strftime('%d/%m/%Y')} √© de **U$ {preco:.2f}**")
        else:
            st.write("N√£o h√° pre√ßo registrado exatamente para esta data.")
    else:
        st.write("### Nenhum dado dispon√≠vel para o per√≠odo selecionado.")

with abas[2]:
    import streamlit as st

    st.title("üìÑ Notebook utilizado para a modelagem em PDF")

    # Caminho do arquivo PDF (certifique-se de que est√° no mesmo diret√≥rio)
    pdf_path = "codigo.pdf"

    # Abrir o arquivo PDF no navegador
    with open(pdf_path, "rb") as file:
        pdf_bytes = file.read()
        st.download_button("üì• Baixar o PDF", pdf_bytes, "notebook.pdf", "application/pdf")

    # Exibir o PDF dentro da p√°gina
    st.components.v1.iframe(f"file:///{pdf_path}", width=700, height=500)
